/**
 * Content Module Test
 * KISS principle: simple test to verify module structure
 */

// Test basic imports
import { ContentProject } from './domain/entities'
import { ContentApplicationService } from './application/services'
import { ContentController } from './presentation/controllers'

describe('Content Module', () => {
  it('should import domain entities', () => {
    expect(ContentProject).toBeDefined()

    const project = ContentProject.create({
      title: 'Test Project',
      description: 'Test Description',
      type: 'presentation',
      status: 'draft',
      userId: 'test-user-id',
      workspaceId: 'test-workspace-id',
      dataSources: [],
      parameters: {}
    })

    expect(project).toBeDefined()
    expect(project.title).toBe('Test Project')
  })

  it('should import application services', () => {
    expect(ContentApplicationService).toBeDefined()
  })

  it('should import presentation controllers', () => {
    expect(ContentController).toBeDefined()
  })

  it('should create content project with valid data', () => {
    const project = ContentProject.create({
      title: 'AI Presentation',
      description: 'Generated by AI',
      type: 'presentation',
      status: 'in_progress',
      userId: 'user-123',
      workspaceId: 'workspace-123',
      dataSources: ['crm', 'chat'],
      parameters: { style: 'professional' }
    })

    expect(project.id).toBeDefined()
    expect(project.title).toBe('AI Presentation')
    expect(project.status).toBe('in_progress')
    expect(project.isActive()).toBe(true)
  })

  it('should update project status', () => {
    const project = ContentProject.create({
      title: 'Test Project',
      description: 'Test Description',
      type: 'report',
      status: 'draft',
      userId: 'user-123',
      workspaceId: 'workspace-123',
      dataSources: [],
      parameters: {}
    })

    project.updateStatus('completed')
    expect(project.status).toBe('completed')
    expect(project.isCompleted()).toBe(true)
  })
})