{
  "version": "0.1",
  "last_updated": "2025-10-24",
  "description": "AURA - Agent Unified Response Architecture registry - Complete agent coordination and task management framework",
  "state_machine": {
    "workflow_name": "Orient → Scope → Execute → Gate",
    "gate_order": [
      "product.discovery",
      "product.prd",
      "agile.planning",
      "code.implement",
      "code.review",
      "qa.ready",
      "qa.contract",
      "qa.e2e",
      "pm.sync"
    ],
    "transition_modes": ["strict", "tolerant", "branch"],
    "lifecycle_log_format": "structured_transitions",
    "cli_readability_limit": 120
  },
  "agents": {
    "architect": {
      "id": "architect",
      "title": "Architect",
      "path": ".spec/agents/architect.agent.md",
      "mission": "Provide architectural guidance and technical direction, translating product goals into feasible technical architecture with measurable NFR targets and risk assessment",
      "success_criteria": [
        "All architecture decisions documented with clear rationale and NFR impact",
        "Technical risks identified with mitigation strategies",
        "System design patterns validated and documented",
        "Architecture compliance verified before implementation"
      ],
      "mcp_tools": ["Read", "Write", "Edit", "Bash", "WebSearch", "WebFetch"],
      "mandate": {
        "own": ["Architecture decisions", "System design patterns", "NFR target definition", "Technical risk assessment", "Architecture compliance validation"],
        "collaborate": ["Product Ops", "Tech Lead", "QA"],
        "out_of_scope": ["Code implementation", "Detailed testing plans", "Product requirements definition"]
      },
      "interacts_with_states": ["DRAFT", "PRD_READY", "PLANNED", "BUILT", "REVIEWED"],
      "authorised_skills": {
        "architect-plan": "ANY ➜ PLANNED",
        "research": "ANY ➜ SAME",
        "context.snapshot": "ANY ➜ SAME"
      },
      "activation_phrase": "As architect, design technical architecture with measurable NFR targets and risk assessment."
    },
    "product-ops": {
      "id": "product-ops",
      "title": "Product Ops",
      "path": ".spec/agents/product-ops.agent.md",
      "mission": "Own task file lifecycle and product framing, from problem validation through stakeholder communication, ensuring KPI alignment and successful delivery",
      "success_criteria": [
        "Problem statements validated with clear market need",
        "Requirements captured with measurable acceptance criteria",
        "Stakeholder communication maintained throughout lifecycle",
        "KPIs defined and tracked for success validation"
      ],
      "mcp_tools": ["Read", "Write", "Edit", "Bash", "WebSearch", "WebFetch"],
      "mandate": {
        "own": ["Task file lifecycle", "Problem validation", "Requirements capture", "Stakeholder communication", "KPI alignment", "Product framing"],
        "collaborate": ["Architect", "Tech Lead", "QA"],
        "out_of_scope": ["Technical architecture decisions", "Code implementation", "Detailed testing execution"]
      },
      "interacts_with_states": ["DRAFT", "PRD_READY", "PLANNED", "BUILT", "REVIEWED", "READY", "CONTRACT_VALIDATED", "E2E_COMPLETE", "SYNCED"],
      "authorised_skills": {
        "product-discovery": "DRAFT ➜ PRD_READY",
        "product-prd": "PRD_READY ➜ PRD_READY",
        "agile-planning": "PRD_READY ➜ PLANNED",
        "research": "ANY ➜ SAME",
        "pm-sync": "E2E_COMPLETE ➜ SYNCED",
        "context.snapshot": "ANY ➜ SAME"
      },
      "activation_phrase": "As product ops, manage task lifecycle with problem validation and stakeholder coordination."
    },
    "tech-lead": {
      "id": "tech-lead",
      "title": "Tech Lead",
      "path": ".spec/agents/tech-lead.agent.md",
      "mission": "Coordinate engineering execution, code quality, and technical coordination, ensuring successful implementation with proper testing and architecture compliance",
      "success_criteria": [
        "Code implemented according to architectural specifications",
        "Quality gates passed with proper testing coverage",
        "Technical coordination successful across all stakeholders",
        "Implementation delivered on time with measurable quality metrics"
      ],
      "mcp_tools": ["Read", "Write", "Edit", "Bash", "WebSearch", "WebFetch"],
      "mandate": {
        "own": ["Engineering execution", "Code quality management", "Technical coordination", "Implementation planning", "Testing strategy", "Code reviews"],
        "collaborate": ["Architect", "Product Ops", "QA"],
        "out_of_scope": ["Architecture decisions", "Product requirements definition", "Stakeholder communication"]
      },
      "interacts_with_states": ["PLANNED", "BUILT", "REVIEWED", "READY", "CONTRACT_VALIDATED"],
      "authorised_skills": {
        "code-implement": "PLANNED ➜ BUILT",
        "code-review": "BUILT ➜ REVIEWED",
        "architect-plan": "ANY ➜ SAME",
        "research": "ANY ➜ SAME",
        "qa-contract": "REVIEWED ➜ CONTRACT_VALIDATED",
        "context.snapshot": "ANY ➜ SAME"
      },
      "activation_phrase": "As tech lead, coordinate engineering execution with quality gates and architecture compliance."
    },
    "qa": {
      "id": "qa",
      "title": "QA",
      "path": ".spec/agents/qa.agent.md",
      "mission": "Validate quality standards and testing strategy, ensuring comprehensive test coverage and providing Go/No-Go decisions with clear evidence and risk assessment",
      "success_criteria": [
        "All quality standards validated with proper test coverage",
        "Go/No-Go decisions provided with clear evidence and rationale",
        "Test environments properly prepared and maintained",
        "End-to-end user journeys validated and documented"
      ],
      "mcp_tools": ["Read", "Write", "Edit", "Bash", "WebSearch", "WebFetch"],
      "mandate": {
        "own": ["Quality assurance", "Testing strategy", "Test environment setup", "Validation", "Go/No-Go decisions"],
        "collaborate": ["Tech Lead", "Architect", "Product Ops"],
        "out_of_scope": ["Code implementation", "Architecture decisions", "Product requirements definition"]
      },
      "interacts_with_states": ["REVIEWED", "READY", "CONTRACT_VALIDATED", "E2E_COMPLETE", "SYNCED"],
      "authorised_skills": {
        "qa-ready": "REVIEWED ➜ READY",
        "qa-contract": "READY ➜ CONTRACT_VALIDATED",
        "qa-e2e": "CONTRACT_VALIDATED ➜ E2E_COMPLETE",
        "code-review": "ANY ➜ SAME",
        "context.snapshot": "ANY ➜ SAME"
      },
      "activation_phrase": "As qa, execute comprehensive testing strategy with Go/No-Go decisions."
    }
  },
  "skills": {
    "gate_transitions": {
            "product-prd": {
        "id": "product-prd",
        "title": "Product PRD",
        "path": ".spec/skills/product-prd.skill.md",
        "target_agent": "product-ops",
        "purpose": "Capture requirements and acceptance criteria with measurable success metrics",
        "from_state": "PRD_READY",
        "to_state": "PRD_READY",
        "tag": "product.prd",
        "trigger_scenarios": ["Requirements need detailed specification", "Acceptance criteria must be defined", "Success metrics require clarification"],
        "required_inputs": ["story_id", "validated_problem", "stakeholder_requirements"],
        "mcp_tooling": ["Read", "Write"],
        "accepts_from": ["product-discovery"]
      },
      "planning": {
        "id": "planning",
        "title": "Planning",
        "path": ".spec/skills/planning.skill.md",
        "target_agent": ["product-ops", "architect", "tech-lead", "qa"],
        "purpose": "Unified planning skill supporting multiple planning domains with template-driven execution",
        "from_state": "varies_by_template",
        "to_state": "varies_by_template",
        "tag": "planning",
        "trigger_scenarios": ["Planning required for any domain", "Resource allocation needed", "Timeline establishment required", "Architecture decisions needed", "Test strategy required"],
        "required_inputs": ["story_id", "planning_context", "planning_resources"],
        "mcp_tooling": ["Read", "Write", "WebSearch", "Bash"],
        "accepts_from": "varies_by_template",
        "templates": {
          "agile": {
            "target_agent": "product-ops",
            "from_state": "PRD_READY",
            "to_state": "PLANNED",
            "accepts_from": ["product-prd"],
            "required_inputs": ["requirements", "team_capacity", "dependencies"]
          },
          "architect": {
            "target_agent": "architect",
            "from_state": "ANY",
            "to_state": "PLANNED",
            "accepts_from": [],
            "required_inputs": ["requirements", "constraints", "quality_targets"]
          },
          "testing": {
            "target_agent": "qa",
            "from_state": "REVIEWED",
            "to_state": "READY",
            "accepts_from": ["code-review"],
            "required_inputs": ["test_requirements", "environment_specifications", "reviewed_code"]
          },
          "implementation": {
            "target_agent": "tech-lead",
            "from_state": "PLANNED",
            "to_state": "BUILT",
            "accepts_from": ["agile-planning", "architect-plan"],
            "required_inputs": ["architecture_plan", "development_resources", "implementation_requirements"]
          }
        }
      },
      "code-implement": {
        "id": "code-implement",
        "title": "Code Implementation",
        "path": ".spec/skills/code-implement.skill.md",
        "target_agent": "tech-lead",
        "purpose": "Build feature with automated tests and architecture compliance",
        "from_state": "PLANNED",
        "to_state": "BUILT",
        "tag": "code.implement",
        "trigger_scenarios": ["Implementation plan approved", "Architecture guidance available", "Development resources allocated"],
        "required_inputs": ["story_id", "architecture_plan", "implementation_requirements"],
        "mcp_tooling": ["Read", "Write", "Edit", "Bash"],
        "accepts_from": ["agile-planning", "architect-plan"]
      },
      "code-review": {
        "id": "code-review",
        "title": "Code Review",
        "path": ".spec/skills/code-review.skill.md",
        "target_agent": "tech-lead",
        "purpose": "Verify code quality and architecture compliance with structured review",
        "from_state": "BUILT",
        "to_state": "REVIEWED",
        "tag": "code.review",
        "trigger_scenarios": ["Code implementation complete", "Quality gates required", "Architecture compliance needed"],
        "required_inputs": ["story_id", "implemented_code", "test_results"],
        "mcp_tooling": ["Read", "Write", "Bash"],
        "accepts_from": ["code-implement"]
      },
      "qa-ready": {
        "id": "qa-ready",
        "title": "QA Ready",
        "path": ".spec/skills/qa-ready.skill.md",
        "target_agent": "qa",
        "purpose": "Prepare test environment and fixtures for comprehensive testing",
        "from_state": "REVIEWED",
        "to_state": "READY",
        "tag": "qa.ready",
        "trigger_scenarios": ["Code review complete", "Test environment setup required", "Test fixtures needed"],
        "required_inputs": ["story_id", "reviewed_code", "test_requirements"],
        "mcp_tooling": ["Read", "Write", "Bash"],
        "accepts_from": ["code-review"]
      },
      "qa-contract": {
        "id": "qa-contract",
        "title": "QA Contract Testing",
        "path": ".spec/skills/qa-contract.skill.md",
        "target_agent": "qa",
        "purpose": "Validate API/event contracts for compatibility and compliance",
        "from_state": "READY",
        "to_state": "CONTRACT_VALIDATED",
        "tag": "qa.contract",
        "trigger_scenarios": ["API contracts need validation", "Event schemas require testing", "Integration compatibility needed"],
        "required_inputs": ["story_id", "api_contracts", "integration_specs"],
        "mcp_tooling": ["Read", "Write", "Bash"],
        "accepts_from": ["qa-ready"]
      },
      "qa-e2e": {
        "id": "qa-e2e",
        "title": "QA E2E Testing",
        "path": ".spec/skills/qa-e2e.skill.md",
        "target_agent": "qa",
        "purpose": "Verify end-to-end user journeys with comprehensive validation",
        "from_state": "CONTRACT_VALIDATED",
        "to_state": "E2E_COMPLETE",
        "tag": "qa.e2e",
        "trigger_scenarios": ["Contract validation complete", "User journeys require testing", "Release readiness needed"],
        "required_inputs": ["story_id", "test_scenarios", "performance_baselines"],
        "mcp_tooling": ["Read", "Write", "Bash"],
        "accepts_from": ["qa-contract"]
      },
      "pm-sync": {
        "id": "pm-sync",
        "title": "PM Sync",
        "path": ".spec/skills/pm-sync.skill.md",
        "target_agent": "product-ops",
        "purpose": "Update stakeholders and close story with delivery summary",
        "from_state": "E2E_COMPLETE",
        "to_state": "SYNCED",
        "tag": "pm.sync",
        "trigger_scenarios": ["Testing complete", "Stakeholder updates needed", "Story closure required"],
        "required_inputs": ["story_id", "test_results", "delivery_metrics"],
        "mcp_tooling": ["Read", "Write"],
        "accepts_from": ["qa-e2e"]
      }
    },
    "supporting_skills": {
      "research": {
        "id": "research",
        "title": "Research",
        "path": ".spec/skills/research.skill.md",
        "target_agent": ["product-ops", "architect", "tech-lead", "qa"],
        "purpose": "Unified research skill supporting multiple research methodologies with intent interpretation",
        "from_state": "ANY",
        "to_state": "SAME",
        "tag": "research",
        "trigger_scenarios": ["Research investigations needed", "Hypotheses need validation", "Technical patterns require analysis", "Market research needed"],
        "required_inputs": ["story_id", "research_questions", "research_context"],
        "mcp_tooling": ["WebSearch", "WebFetch", "Read"],
        "templates": {
          "analytics": {
            "purpose": "Validate hypotheses and metrics with quantitative data",
            "additional_inputs": ["data_sources", "analysis_requirements"],
            "evidence_type": "data_analysis with statistical validation",
            "output_focus": "Quantitative insights, metrics validation, hypothesis testing"
          },
          "technical": {
            "purpose": "Investigate patterns and technical constraints",
            "additional_inputs": ["research_topics", "technical_constraints"],
            "evidence_type": "findings with technical documentation",
            "output_focus": "Technical patterns, constraints, feasibility assessment"
          },
          "market": {
            "purpose": "Analyze market trends and opportunities",
            "additional_inputs": ["market_scope", "competitive_landscape"],
            "evidence_type": "market_analysis with trend identification",
            "output_focus": "Market insights, opportunity sizing, trend analysis"
          },
          "competitive": {
            "purpose": "Analyze competitive landscape and positioning",
            "additional_inputs": ["competitor_list", "analysis_criteria"],
            "evidence_type": "competitive_analysis with feature comparison",
            "output_focus": "Competitive insights, positioning, differentiation opportunities"
          },
          "product-discovery": {
            "purpose": "Validate problem and market need with customer evidence",
            "additional_inputs": ["customer_interviews", "market_analysis", "stakeholder_requirements"],
            "evidence_type": "validation_survey with quantitative evidence",
            "output_focus": "Problem validation findings, market need confirmation, customer pain quantification",
            "state_transition": {
              "from_state": "DRAFT",
              "to_state": "PRD_READY",
              "tag": "product.discovery"
            }
          }
        }
      },
      "context.snapshot": {
        "id": "context.snapshot",
        "title": "Context Snapshot",
        "path": ".spec/skills/context.snapshot.skill.md",
        "target_agent": ["architect", "product-ops", "tech-lead", "qa"],
        "purpose": "Capture current status and manage log organization",
        "from_state": "ANY",
        "to_state": "SAME",
        "tag": "context.snapshot",
        "trigger_scenarios": ["Handoff between personas required", "Work stalling", "Status checkpoint needed", "Lifecycle Log exceeds threshold", "Content compaction needed"],
        "required_inputs": ["story_id", "operation_type"],
        "mcp_tooling": ["Read", "Write"]
      }
    }
  },
  "gate_flow": {
    "transitions": [
      {
        "from": "DRAFT",
        "skill": "research",
        "skill_parameters": {
          "research_type": "product-discovery"
        },
        "to": "PRD_READY",
        "owner": "product-ops"
      },
      {
        "from": "PRD_READY",
        "skill": "product-prd",
        "to": "PRD_READY",
        "owner": "product-ops"
      },
      {
        "from": "PRD_READY",
        "skill": "planning",
        "skill_parameters": {
          "planning_type": "agile"
        },
        "to": "PLANNED",
        "owner": "product-ops"
      },
      {
        "from": "PLANNED",
        "skill": "code-implement",
        "to": "BUILT",
        "owner": "tech-lead"
      },
      {
        "from": "BUILT",
        "skill": "code-review",
        "to": "REVIEWED",
        "owner": "tech-lead"
      },
      {
        "from": "REVIEWED",
        "skill": "qa-ready",
        "to": "READY",
        "owner": "qa"
      },
      {
        "from": "READY",
        "skill": "qa-contract",
        "to": "CONTRACT_VALIDATED",
        "owner": "qa"
      },
      {
        "from": "CONTRACT_VALIDATED",
        "skill": "qa-e2e",
        "to": "E2E_COMPLETE",
        "owner": "qa"
      },
      {
        "from": "E2E_COMPLETE",
        "skill": "pm-sync",
        "to": "SYNCED",
        "owner": "product-ops"
      }
    ]
  },
  "quality_standards": {
    "cli_readability": "Entries must be ≤120 chars per line",
    "evidence_citation": "Use actionable references (ref=path#Lx or URLs)",
    "risk_management": "Document risks with owners and mitigation strategies",
    "documentation_updates": "Update glossary/constitution when introducing new concepts",
    "transition_format": "Structured transition logs with MODE, FROM_STATE, TO_STATE, WHY, OUTPUT, FOLLOW-UP",
    "blocked_protocol": "BLOCKED(missing_inputs=[...], unblock_steps=[...]) format for missing prerequisites"
  },
  "templates": {
    "task_template": ".spec/templates/task-template.md",
    "skill_template": ".spec/templates/skill-template.md",
    "agent_template": ".spec/templates/agent-template.md",
    "skill_scaffold": ".spec/skills/skill.template.md",
    "agent_scaffold": ".spec/agents/agent.template.md"
  },
  "documentation": {
    "constitution": ".spec/constitution.md",
    "glossary": ".spec/glossary.md",
    "claude_guide": ".spec/CLAUDE.md",
    "implementation_summary": ".spec/STATE_MACHINE_IMPLEMENTATION_SUMMARY.md"
  }
}