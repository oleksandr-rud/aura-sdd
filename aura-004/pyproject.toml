[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "aura-004"
version = "0.1.0"
description = "AURA-004: Advanced Coding Agent with LangGraph Integration"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AURA Team", email = "team@aura.ai"}
]
maintainers = [
    {name = "AURA Team", email = "team@aura.ai"}
]
keywords = ["ai", "agent", "coding", "langgraph", "chromadb", "code-analysis"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"
dependencies = [
    # Core LangGraph and LangChain
    "langgraph>=0.2.0",
    "langchain>=0.3.0",
    "langchain-core>=0.3.0",
    "langchain-openai>=0.2.0",
    "langchain-anthropic>=0.2.0",

    # Vector Database
    "chromadb>=0.5.0",
    "sentence-transformers>=3.0.0",

    # Code Analysis
    "tree-sitter>=0.21.0",
    "tree-sitter-python>=0.21.0",
    "tree-sitter-javascript>=0.21.0",
    "tree-sitter-typescript>=0.21.0",
    "tree-sitter-java>=0.21.0",
    "tree-sitter-go>=0.21.0",
    "tree-sitter-rust>=0.21.0",
    "tree-sitter-cpp>=0.21.0",

    # Data Processing
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",

    # Async and Concurrency
    "asyncio-throttle>=1.0.0",
    "aiofiles>=23.0.0",

    # CLI and UI
    "click>=8.0.0",
    "rich>=13.0.0",
    "typer>=0.12.0",

    # Configuration and Logging
    "python-dotenv>=1.0.0",
    "loguru>=0.7.0",
    "structlog>=23.0.0",

    # Utilities
    "tenacity>=8.0.0",
    "tqdm>=4.65.0",
    "pyyaml>=6.0",
    "jsonlines>=4.0.0",
    "pathlib>=1.0.1",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",

    # Code Quality
    "black>=24.0.0",
    "ruff>=0.6.0",
    "mypy>=1.10.0",
    "pre-commit>=3.7.0",

    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.25.0",

    # Development Tools
    "ipython>=8.0.0",
    "jupyter>=1.0.0",
    "watchdog>=4.0.0",
]

test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "factory-boy>=3.3.0",
    "faker>=25.0.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.25.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
]

monitoring = [
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation>=0.42b0",
]

[project.urls]
Homepage = "https://github.com/aura-ai/aura-004"
Documentation = "https://aura-004.readthedocs.io"
Repository = "https://github.com/aura-ai/aura-004"
Issues = "https://github.com/aura-ai/aura-004/issues"
Changelog = "https://github.com/aura-ai/aura-004/blob/main/CHANGELOG.md"

[project.scripts]
aura-004 = "aura_004.cli:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["aura_004*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
aura_004 = ["py.typed", "**/*.pyi", "data/**/*"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "PL",  # pylint
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "PLW2901",  # redefined-loop-name
    "PLR0913",  # too many arguments
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG", "PLR2004"]

[tool.ruff.isort]
known-first-party = ["aura_004"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "tree_sitter.*",
    "chromadb.*",
    "sentence_transformers.*",
    "langgraph.*",
    "langchain.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=aura_004",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src/aura_004"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]